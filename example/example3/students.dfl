use (
  sysout
  identity
  Function
)

@fact ZERO := 0
@fact ONE := 1
@fact TWO := 2
@fact STUDENTS := listOf Student

struct Student (
  <text Name>
  <decimal Gpa>
  <number Grade>
)

@exec main begin
  sortedStudents := sortLambda STUDENTS (Student . Gpa)
  sysout sortedStudents
end

@@ sysout <Student student> begin
  sysout (student . Name)
end

@@ List[a] sort <List[a] items> begin
  return (sortLambda items identity)
end

@@ List[a] sortLambda <List[a] items> <Function[a, decimal] key> begin
  listLen := length items
  if (listLen <= ONE) then
    return items
  endif

  halfway := listLen / TWO
  firstHalf := sortLambda (slice items ZERO halfway) key
  secondHalf := sortLambda (slice items halfway listLen) key

  return (mergeLambda firstHalf secondHalf key)
end

@@ List[a] mergeLambda <List[a] firstHalf> <List[a] secondHalf> <Function[a, decimal] key> begin
  fLength := length firstHalf
  if (fLength = ZERO) then
    return secondHalf
  endif

  sLength := length secondHalf
  if (sLength = ZERO) then
    return firstHalf
  endif

  left := key (index ZERO firstHalf)
  right := key (index ZERO secondHalf)

  if (left <= right) then
    return (concat (list left) (mergeLambda (tail firstHalf) secondHalf))

  else
    return (concat (list right) (mergeLambda firstHalf (tail secondHalf)))

  endif
end
